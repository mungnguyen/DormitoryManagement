{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/home/mung_nguyen/20182/Project/Code/DormitoryManagement/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/mung_nguyen/20182/Project/Code/DormitoryManagement/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar crypto = require('crypto'),\n    querystring = require('querystring');\n\nvar AWSRestSigner =\n/*#__PURE__*/\nfunction () {\n  function AWSRestSigner(credentials) {\n    _classCallCheck(this, AWSRestSigner);\n\n    this.accessKeyId = credentials.accessKeyId;\n    this.secretAccessKey = credentials.secretAccessKey;\n    this.debug = false;\n  }\n\n  _createClass(AWSRestSigner, [{\n    key: \"sign\",\n    value: function sign(opts) {\n      var method = opts.method,\n          host = opts.host || '',\n          path = opts.path || opts.pathname,\n          xAmzHeaders = {};\n      var date = null,\n          contentType = null,\n          contentMd5 = null,\n          bucket = \"\";\n\n      var _match = host.match(/^(.*)\\.s3\\.amazonaws\\.com/);\n\n      if (_match) {\n        bucket = _match[1];\n      } else {\n        bucket = host;\n      }\n\n      if (!opts.headers) {\n        opts.headers = {};\n      }\n\n      for (var _i = 0, _Object$keys = Object.keys(opts.headers); _i < _Object$keys.length; _i++) {\n        var key = _Object$keys[_i];\n        var lcKey = key.toLowerCase();\n\n        switch (lcKey) {\n          case \"date\":\n            date = opts.headers[key];\n            break;\n\n          case \"content-type\":\n            contentType = opts.headers[key];\n            break;\n\n          case \"content-md5\":\n            contentMd5 = opts.headers[key];\n            break;\n\n          default:\n            if (lcKey.slice(0, 6) == \"x-amz-\") {\n              xAmzHeaders[lcKey] = opts.headers[key];\n            }\n\n            break;\n        }\n      }\n\n      if (!date) {\n        date = new Date().toUTCString();\n        opts.headers.date = date;\n      }\n\n      opts.headers[\"Authorization\"] = this._sign(method, bucket, path, date, contentType, contentMd5, xAmzHeaders);\n    }\n  }, {\n    key: \"_sign\",\n    value: function _sign(method, bucket, path, date, contentType, contentMd5, xAmzHeaders) {\n      var qPos = path.indexOf('?');\n      var queryToSign = '';\n      var _path = path;\n\n      if (qPos >= 0) {\n        var queryPart = path.substr(qPos + 1, path.length);\n        _path = path.substr(0, qPos);\n        queryToSign = AWSRestSigner.extractSubResources(queryPart);\n      }\n\n      var canonicalizedAmzHeaders = AWSRestSigner.canonizeAwzHeaders(xAmzHeaders);\n      var canonicalizedResource = '';\n\n      if (bucket != '') {\n        canonicalizedResource += '/' + bucket;\n      }\n\n      canonicalizedResource += _path + queryToSign;\n      var stringToSign = method + \"\\n\";\n\n      if (contentMd5) {\n        stringToSign += contentMd5;\n      }\n\n      stringToSign += \"\\n\";\n\n      if (contentType) {\n        stringToSign += contentType;\n      }\n\n      stringToSign += \"\\n\";\n      stringToSign += date + \"\\n\" + canonicalizedAmzHeaders + canonicalizedResource;\n\n      if (this.debug) {\n        console.log(\"-----------\");\n        console.log(stringToSign.replace(/\\n/g, \"\\\\n\\n\"));\n        console.log(\"-----------\");\n      }\n\n      return 'AWS ' + this.accessKeyId + ':' + crypto.createHmac('sha1', this.secretAccessKey).update(stringToSign).digest('base64');\n    }\n  }], [{\n    key: \"canonizeAwzHeaders\",\n    value: function canonizeAwzHeaders(xAmzHeaders) {\n      if (xAmzHeaders) {\n        var lcHeaders = {};\n\n        for (var _i2 = 0, _Object$keys2 = Object.keys(xAmzHeaders); _i2 < _Object$keys2.length; _i2++) {\n          var header = _Object$keys2[_i2];\n          var h = header.toLowerCase();\n\n          if (h != 'x-amz-date') {\n            lcHeaders[h] = xAmzHeaders[header];\n          }\n        }\n\n        return Object.keys(lcHeaders).map(function (header) {\n          return header.toLowerCase();\n        }).sort().map(function (header) {\n          return header + ':' + lcHeaders[header] + \"\\n\";\n        }).join('');\n      }\n\n      return '';\n    }\n  }, {\n    key: \"extractSubResources\",\n    value: function extractSubResources(queryString) {\n      var query = querystring.parse(queryString);\n      var subresources = [];\n\n      for (var _i3 = 0, _Object$keys3 = Object.keys(query); _i3 < _Object$keys3.length; _i3++) {\n        var param = _Object$keys3[_i3];\n\n        if (AWSRestSigner.subResources.indexOf(param) >= 0) {\n          subresources.push(param);\n        }\n      }\n\n      if (subresources.length) {\n        subresources.sort();\n        var queryToSign = subresources.map(function (param) {\n          var result = param;\n\n          if (query[param] != '') {\n            result += \"=\" + query[param];\n          }\n\n          return result;\n        });\n        return \"?\" + queryToSign.join(\"&\");\n      }\n\n      return '';\n    }\n  }]);\n\n  return AWSRestSigner;\n}();\n\nAWSRestSigner.subResources = ['acl', 'lifecycle', 'location', 'logging', 'notification', 'partNumber', 'policy', 'requestPayment', 'torrent', 'uploadId', 'uploads', 'versionId', 'versioning', 'versions', 'website'];\nmodule.exports = AWSRestSigner;","map":null,"metadata":{},"sourceType":"script"}