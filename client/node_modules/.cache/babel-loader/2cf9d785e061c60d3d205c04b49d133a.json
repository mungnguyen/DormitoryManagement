{"ast":null,"code":"// Load modules\nvar Http = require('http');\n\nvar NodeUtil = require('util');\n\nvar Hoek = require('hoek'); // Declare internals\n\n\nvar internals = {};\n\nexports = module.exports = internals.Boom = function ()\n/* (new Error) or (code, message) */\n{\n  var self = this;\n  Hoek.assert(this.constructor === internals.Boom, 'Error must be instantiated using new');\n  Error.call(this);\n  this.isBoom = true;\n  this.response = {\n    code: 0,\n    payload: {},\n    headers: {} // type: 'content-type'\n\n  };\n\n  if (arguments[0] instanceof Error) {\n    // Error\n    var error = arguments[0];\n    this.data = error;\n    this.response.code = error.code || 500;\n\n    if (error.message) {\n      this.message = error.message;\n    }\n  } else {\n    // code, message\n    var code = arguments[0];\n    var message = arguments[1];\n    Hoek.assert(!isNaN(parseFloat(code)) && isFinite(code) && code >= 400, 'First argument must be a number (400+)');\n    this.response.code = code;\n\n    if (message) {\n      this.message = message;\n    }\n  } // Response format\n\n\n  this.reformat();\n  return this;\n};\n\nNodeUtil.inherits(internals.Boom, Error);\n\ninternals.Boom.prototype.reformat = function () {\n  this.response.payload.code = this.response.code;\n  this.response.payload.error = Http.STATUS_CODES[this.response.code] || 'Unknown';\n\n  if (this.message) {\n    this.response.payload.message = Hoek.escapeHtml(this.message); // Prevent XSS from error message\n  }\n}; // Utilities\n\n\ninternals.Boom.badRequest = function (message) {\n  return new internals.Boom(400, message);\n};\n\ninternals.Boom.unauthorized = function (error, scheme, attributes) {\n  // Or function (error, wwwAuthenticate[])\n  var err = new internals.Boom(401, error);\n\n  if (!scheme) {\n    return err;\n  }\n\n  var wwwAuthenticate = '';\n\n  if (typeof scheme === 'string') {\n    // function (error, scheme, attributes)\n    wwwAuthenticate = scheme;\n\n    if (attributes) {\n      var names = Object.keys(attributes);\n\n      for (var i = 0, il = names.length; i < il; ++i) {\n        if (i) {\n          wwwAuthenticate += ',';\n        }\n\n        var value = attributes[names[i]];\n\n        if (value === null || value === undefined) {\n          // Value can be zero\n          value = '';\n        }\n\n        wwwAuthenticate += ' ' + names[i] + '=\"' + Hoek.escapeHeaderAttribute(value.toString()) + '\"';\n      }\n    }\n\n    if (error) {\n      if (attributes) {\n        wwwAuthenticate += ',';\n      }\n\n      wwwAuthenticate += ' error=\"' + Hoek.escapeHeaderAttribute(error) + '\"';\n    } else {\n      err.isMissing = true;\n    }\n  } else {\n    // function (error, wwwAuthenticate[])\n    var wwwArray = scheme;\n\n    for (var i = 0, il = wwwArray.length; i < il; ++i) {\n      if (i) {\n        wwwAuthenticate += ', ';\n      }\n\n      wwwAuthenticate += wwwArray[i];\n    }\n  }\n\n  err.response.headers['WWW-Authenticate'] = wwwAuthenticate;\n  return err;\n};\n\ninternals.Boom.clientTimeout = function (message) {\n  return new internals.Boom(408, message);\n};\n\ninternals.Boom.serverTimeout = function (message) {\n  return new internals.Boom(503, message);\n};\n\ninternals.Boom.forbidden = function (message) {\n  return new internals.Boom(403, message);\n};\n\ninternals.Boom.notFound = function (message) {\n  return new internals.Boom(404, message);\n};\n\ninternals.Boom.internal = function (message, data) {\n  var err = new internals.Boom(500, message);\n\n  if (data && data.stack) {\n    err.trace = data.stack.split('\\n');\n    err.outterTrace = Hoek.displayStack(1);\n  } else {\n    err.trace = Hoek.displayStack(1);\n  }\n\n  err.data = data;\n  err.response.payload.message = 'An internal server error occurred'; // Hide actual error from user\n\n  return err;\n};\n\ninternals.Boom.passThrough = function (code, payload, contentType, headers) {\n  var err = new internals.Boom(500, 'Pass-through'); // 500 code is only used to initialize\n\n  err.data = {\n    code: code,\n    payload: payload,\n    type: contentType\n  };\n  err.response.code = code;\n  err.response.type = contentType;\n  err.response.headers = headers;\n  err.response.payload = payload;\n  return err;\n};","map":null,"metadata":{},"sourceType":"script"}