{"ast":null,"code":"// Load modules\nvar Hoek = require('hoek');\n\nvar Sntp = require('sntp');\n\nvar Boom = require('boom'); // Declare internals\n\n\nvar internals = {}; // Import Hoek Utilities\n\ninternals.import = function () {\n  for (var i in Hoek) {\n    if (Hoek.hasOwnProperty(i)) {\n      exports[i] = Hoek[i];\n    }\n  }\n};\n\ninternals.import(); // Hawk version\n\nexports.version = function () {\n  return exports.loadPackage(__dirname + '/..').version;\n}; // Extract host and port from request\n\n\nexports.parseHost = function (req, hostHeaderName) {\n  hostHeaderName = hostHeaderName ? hostHeaderName.toLowerCase() : 'host';\n  var hostHeader = req.headers[hostHeaderName];\n\n  if (!hostHeader) {\n    return null;\n  }\n\n  var hostHeaderRegex = /^(?:(?:\\r\\n)?[\\t ])*([^:]+)(?::(\\d+))?(?:(?:\\r\\n)?[\\t ])*$/; // Does not support IPv6\n\n  var hostParts = hostHeader.match(hostHeaderRegex);\n\n  if (!hostParts || hostParts.length !== 3 || !hostParts[1]) {\n    return null;\n  }\n\n  return {\n    name: hostParts[1],\n    port: hostParts[2] ? hostParts[2] : req.connection && req.connection.encrypted ? 443 : 80\n  };\n}; // Parse Content-Type header content\n\n\nexports.parseContentType = function (header) {\n  if (!header) {\n    return '';\n  }\n\n  return header.split(';')[0].trim().toLowerCase();\n}; // Convert node's  to request configuration object\n\n\nexports.parseRequest = function (req, options) {\n  if (!req.headers) {\n    return req;\n  } // Obtain host and port information\n\n\n  var host = exports.parseHost(req, options.hostHeaderName);\n\n  if (!host) {\n    return new Error('Invalid Host header');\n  }\n\n  var request = {\n    method: req.method,\n    url: req.url,\n    host: host.name,\n    port: host.port,\n    authorization: req.headers.authorization,\n    contentType: req.headers['content-type'] || ''\n  };\n  return request;\n};\n\nexports.now = function () {\n  return Sntp.now();\n}; // Parse Hawk HTTP Authorization header\n\n\nexports.parseAuthorizationHeader = function (header, keys) {\n  keys = keys || ['id', 'ts', 'nonce', 'hash', 'ext', 'mac', 'app', 'dlg'];\n\n  if (!header) {\n    return Boom.unauthorized(null, 'Hawk');\n  }\n\n  var headerParts = header.match(/^(\\w+)(?:\\s+(.*))?$/); // Header: scheme[ something]\n\n  if (!headerParts) {\n    return Boom.badRequest('Invalid header syntax');\n  }\n\n  var scheme = headerParts[1];\n\n  if (scheme.toLowerCase() !== 'hawk') {\n    return Boom.unauthorized(null, 'Hawk');\n  }\n\n  var attributesString = headerParts[2];\n\n  if (!attributesString) {\n    return Boom.badRequest('Invalid header syntax');\n  }\n\n  var attributes = {};\n  var errorMessage = '';\n  var verify = attributesString.replace(/(\\w+)=\"([^\"\\\\]*)\"\\s*(?:,\\s*|$)/g, function ($0, $1, $2) {\n    // Check valid attribute names\n    if (keys.indexOf($1) === -1) {\n      errorMessage = 'Unknown attribute: ' + $1;\n      return;\n    } // Allowed attribute value characters: !#$%&'()*+,-./:;<=>?@[]^_`{|}~ and space, a-z, A-Z, 0-9\n\n\n    if ($2.match(/^[ \\w\\!#\\$%&'\\(\\)\\*\\+,\\-\\.\\/\\:;<\\=>\\?@\\[\\]\\^`\\{\\|\\}~]+$/) === null) {\n      errorMessage = 'Bad attribute value: ' + $1;\n      return;\n    } // Check for duplicates\n\n\n    if (attributes.hasOwnProperty($1)) {\n      errorMessage = 'Duplicate attribute: ' + $1;\n      return;\n    }\n\n    attributes[$1] = $2;\n    return '';\n  });\n\n  if (verify !== '') {\n    return Boom.badRequest(errorMessage || 'Bad header format');\n  }\n\n  return attributes;\n};","map":null,"metadata":{},"sourceType":"script"}