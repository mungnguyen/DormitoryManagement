{"ast":null,"code":"// Load modules\nvar Crypto = require('crypto');\n\nvar Url = require('url');\n\nvar Utils = require('./utils'); // Declare internals\n\n\nvar internals = {}; // MAC normalization format version\n\nexports.headerVersion = '1'; // Prevent comparison of mac values generated with different normalized string formats\n// Supported HMAC algorithms\n\nexports.algorithms = ['sha1', 'sha256']; // Calculate the request MAC\n\n/*\n    type: 'header'                                  // 'header', 'bewit', 'response'\n    options: {\n        credentials: {\n            key: 'aoijedoaijsdlaksjdl',\n            algorithm: 'sha256'                     // 'sha1', 'sha256'\n        },\n        method: 'GET',\n        resource: '/resource?a=1&b=2',\n        host: 'example.com',\n        port: 8080,\n        ts: 1357718381034,\n        nonce: 'd3d345f',\n        hash: 'U4MKKSmiVxk37JCCrAVIjV/OhB3y+NdwoCr6RShbVkE=',\n        ext: 'app-specific-data',\n        app: 'hf48hd83qwkj',                        // Application id (Oz)\n        dlg: 'd8djwekds9cj'                         // Delegated by application id (Oz), requires options.app\n    }\n*/\n\nexports.calculateMac = function (type, options) {\n  var normalized = exports.generateNormalizedString(type, options);\n  var hmac = Crypto.createHmac(options.credentials.algorithm, options.credentials.key).update(normalized);\n  var digest = hmac.digest('base64');\n  return digest;\n};\n\nexports.generateNormalizedString = function (type, options) {\n  var normalized = 'hawk.' + exports.headerVersion + '.' + type + '\\n' + options.ts + '\\n' + options.nonce + '\\n' + options.method.toUpperCase() + '\\n' + options.resource + '\\n' + options.host.toLowerCase() + '\\n' + options.port + '\\n' + (options.hash || '') + '\\n';\n\n  if (options.ext) {\n    normalized += options.ext.replace('\\\\', '\\\\\\\\').replace('\\n', '\\\\n');\n  }\n\n  normalized += '\\n';\n\n  if (options.app) {\n    normalized += options.app + '\\n' + (options.dlg || '') + '\\n';\n  }\n\n  return normalized;\n};\n\nexports.calculateHash = function (payload, algorithm, contentType) {\n  var hash = Crypto.createHash(algorithm);\n  hash.update('hawk.' + exports.headerVersion + '.payload\\n');\n  hash.update(Utils.parseContentType(contentType) + '\\n');\n  hash.update(payload || '');\n  hash.update('\\n');\n  return hash.digest('base64');\n};\n\nexports.calculateTsMac = function (ts, credentials) {\n  var hash = Crypto.createHash(credentials.algorithm);\n  hash.update('hawk.' + exports.headerVersion + '.ts\\n' + ts + '\\n');\n  return hash.digest('base64');\n};","map":null,"metadata":{},"sourceType":"script"}