{"ast":null,"code":"// Load modules\nvar Url = require('url');\n\nvar Hoek = require('hoek');\n\nvar Cryptiles = require('cryptiles');\n\nvar Crypto = require('./crypto');\n\nvar Utils = require('./utils'); // Declare internals\n\n\nvar internals = {}; // Generate an Authorization header for a given request\n\n/*\n    uri: 'http://example.com/resource?a=b' or object from Url.parse()\n    method: HTTP verb (e.g. 'GET', 'POST')\n    options: {\n\n        // Required\n\n        credentials: {\n            id: 'dh37fgj492je',\n            key: 'aoijedoaijsdlaksjdl',\n            algorithm: 'sha256'                                 // 'sha1', 'sha256'\n        },\n\n        // Optional\n\n        ext: 'application-specific',                        // Application specific data sent via the ext attribute\n        timestamp: Date.now(),                              // A pre-calculated timestamp\n        nonce: '2334f34f',                                  // A pre-generated nonce\n        localtimeOffsetMsec: 400,                           // Time offset to sync with server time (ignored if timestamp provided)\n        payload: '{\"some\":\"payload\"}',                      // UTF-8 encoded string for body hash generation (ignored if hash provided)\n        contentType: 'application/json',                    // Payload content-type (ignored if hash provided)\n        hash: 'U4MKKSmiVxk37JCCrAVIjV=',                    // Pre-calculated payload hash\n        app: '24s23423f34dx',                               // Oz application id\n        dlg: '234sz34tww3sd'                                // Oz delegated-by application id\n    }\n*/\n\nexports.header = function (uri, method, options) {\n  var result = {\n    field: '',\n    artifacts: {}\n  }; // Validate inputs\n\n  if (!uri || typeof uri !== 'string' && typeof uri !== 'object' || !method || typeof method !== 'string' || !options || typeof options !== 'object') {\n    return result;\n  } // Application time\n\n\n  var timestamp = options.timestamp || Math.floor((Utils.now() + (options.localtimeOffsetMsec || 0)) / 1000); // Validate credentials\n\n  var credentials = options.credentials;\n\n  if (!credentials || !credentials.id || !credentials.key || !credentials.algorithm) {\n    // Invalid credential object\n    return result;\n  }\n\n  if (Crypto.algorithms.indexOf(credentials.algorithm) === -1) {\n    return result;\n  } // Parse URI\n\n\n  if (typeof uri === 'string') {\n    uri = Url.parse(uri);\n  } // Calculate signature\n\n\n  var artifacts = {\n    credentials: credentials,\n    ts: timestamp,\n    nonce: options.nonce || Cryptiles.randomString(6),\n    method: method,\n    resource: uri.pathname + (uri.search || ''),\n    // Maintain trailing '?'\n    host: uri.hostname,\n    port: uri.port || (uri.protocol === 'http:' ? 80 : 443),\n    hash: options.hash,\n    ext: options.ext,\n    app: options.app,\n    dlg: options.dlg\n  };\n  result.artifacts = artifacts; // Calculate payload hash\n\n  if (!artifacts.hash && options.hasOwnProperty('payload')) {\n    artifacts.hash = Crypto.calculateHash(options.payload, credentials.algorithm, options.contentType);\n  }\n\n  var mac = Crypto.calculateMac('header', artifacts); // Construct header\n\n  var hasExt = artifacts.ext !== null && artifacts.ext !== undefined && artifacts.ext !== ''; // Other falsey values allowed\n\n  var header = 'Hawk id=\"' + credentials.id + '\", ts=\"' + artifacts.ts + '\", nonce=\"' + artifacts.nonce + (artifacts.hash ? '\", hash=\"' + artifacts.hash : '') + (hasExt ? '\", ext=\"' + Utils.escapeHeaderAttribute(artifacts.ext) : '') + '\", mac=\"' + mac + '\"';\n\n  if (artifacts.app) {\n    header += ', app=\"' + artifacts.app + (artifacts.dlg ? '\", dlg=\"' + artifacts.dlg : '') + '\"';\n  }\n\n  result.field = header;\n  return result;\n}; // Validate server response\n\n/*\n    res:        node's response object\n    artifacts:  object recieved from header().artifacts\n    options: {\n        payload:    optional payload received\n        required:   specifies if a Server-Authorization header is required. Defaults to 'false'\n    }\n*/\n\n\nexports.authenticate = function (res, artifacts, options) {\n  artifacts = Hoek.clone(artifacts);\n  options = options || {};\n\n  if (res.headers['www-authenticate']) {\n    // Parse HTTP WWW-Authenticate header\n    var attributes = Utils.parseAuthorizationHeader(res.headers['www-authenticate'], ['ts', 'tsm', 'error']);\n\n    if (attributes instanceof Error) {\n      return false;\n    }\n\n    if (attributes.ts) {\n      var tsm = Crypto.calculateTsMac(attributes.ts, artifacts.credentials);\n\n      if (!Cryptiles.fixedTimeComparison(tsm, attributes.tsm)) {\n        return false;\n      }\n    }\n  } // Parse HTTP Server-Authorization header\n\n\n  if (!res.headers['server-authorization'] && !options.required) {\n    return true;\n  }\n\n  var attributes = Utils.parseAuthorizationHeader(res.headers['server-authorization'], ['mac', 'ext', 'hash']);\n\n  if (attributes instanceof Error) {\n    return false;\n  }\n\n  artifacts.ext = attributes.ext;\n  artifacts.hash = attributes.hash;\n  var mac = Crypto.calculateMac('response', artifacts);\n\n  if (!Cryptiles.fixedTimeComparison(mac, attributes.mac)) {\n    return false;\n  }\n\n  if (!options.hasOwnProperty('payload')) {\n    return true;\n  }\n\n  if (!attributes.hash) {\n    return false;\n  }\n\n  var calculatedHash = Crypto.calculateHash(options.payload, artifacts.credentials.algorithm, res.headers['content-type']);\n  return Cryptiles.fixedTimeComparison(calculatedHash, attributes.hash);\n};","map":null,"metadata":{},"sourceType":"script"}