{"ast":null,"code":"// Load modules\nvar Crypto = require('crypto');\n\nvar Boom = require('boom'); // Declare internals\n\n\nvar internals = {}; // Generate a cryptographically strong pseudo-random data\n\nexports.randomString = function (size) {\n  var buffer = exports.randomBits((size + 1) * 6);\n\n  if (buffer instanceof Error) {\n    return buffer;\n  }\n\n  var string = buffer.toString('base64').replace(/\\+/g, '-').replace(/\\//g, '_').replace(/\\=/g, '');\n  return string.slice(0, size);\n};\n\nexports.randomBits = function (bits) {\n  if (!bits || bits < 0) {\n    return Boom.internal('Invalid random bits count');\n  }\n\n  var bytes = Math.ceil(bits / 8);\n\n  try {\n    return Crypto.randomBytes(bytes);\n  } catch (err) {\n    return Boom.internal('Failed generating random bits: ' + err.message);\n  }\n}; // Compare two strings using fixed time algorithm (to prevent time-based analysis of MAC digest match)\n\n\nexports.fixedTimeComparison = function (a, b) {\n  var mismatch = a.length === b.length ? 0 : 1;\n\n  if (mismatch) {\n    b = a;\n  }\n\n  for (var i = 0, il = a.length; i < il; ++i) {\n    var ac = a.charCodeAt(i);\n    var bc = b.charCodeAt(i);\n    mismatch += ac === bc ? 0 : 1;\n  }\n\n  return mismatch === 0;\n};","map":null,"metadata":{},"sourceType":"script"}